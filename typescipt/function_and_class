export interface user {
    username: string
    userpassward: string
    isp: boolean
}

export interface user_stack {
    username: string
    userpassward: string
    isp: boolean
}

interface st {
    name: string
    passward: string
    usern: string
    userp: string
    ispremium: boolean
}

class hello implements st {
    private inputname: string; private inputpassward: string; private inputpr: boolean; private inputusern: string; private inputuserp: string
    constructor(public usern: string, public userp: string, public name: string, public passward: string, public ispremium: boolean) {
        this.inputname = name; this.inputpassward = passward; this.inputpr = ispremium; this.inputusern = usern; this.inputuserp = userp
    }
    hellouser() {
        if (this.inputname == this.inputusern && this.inputpassward == this.inputuserp && this.inputpr == false) {
            console.log(`hello "not" premium user ${this.inputname}`) 
        } else if(this.inputname == this.inputusern && this.inputpassward == this.inputuserp && this.inputpr == true) {
            console.log(`hello premium user ${this.inputname}! :D`)
        } else {
            console.log("try again")
        }
    }
}

export function print(s: string): void {
    console.log(s)
}

export class Log extends hello {
    constructor(public usern: string, public userp: string, public name: string, public passward: string, public ispremium: boolean) {
        super(usern, userp, name, passward, ispremium);        
    }
}

export function multiplication(a: number, b: number): number {
    return a*b
}

export const Multiplication = (a: number, b: number): number => {return a*b}

export let Multiplication1 = new Function('a', 'b', 'return a*b')

export let Multiplication2 = function(a: number, b: number) {return a*b}

export const init = (callback: () => void, s: string): void => {
    console.log(s)
    callback()
}
